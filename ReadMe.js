// food_mart 버전 1.0

// 자바스크립트와 node.js, express를 이용한 웹 어플리케이션 구축

// 1. 터미널에서 프로젝트에 필요한 라이브러리(패키지, 모듈) 설치
// npm install express : 웹 서버 기능의 express 모듈 설치
// npm install body-parser : POST 방식으로 전송된 데이터를 추출하는 body-parser 모듈 설치
// npm install fs :  파일 처리를 위한 fs 모듈 설치
// npm install path : 파일의 경로를 처리하기 위한 path 모듈 설치
// npm install -g nodemon : 소스코드 수정 시 자동으로 서버 재시작을 위한 nodemon 모듈 설치

// 2. 위에서 설치된 라이브러리들이 node_modules 폴더에 설치됨

// 3. 파워쉘(관리자모드)에서 nodemon을 이용하여 서버를 실행
// Set-ExecutionPolicy RemoteSigned -Scope CurrentUser

// 4. 메인 폴더에 public 폴더 생성
// public 폴더에는 html, css, js, image 등의 정적파일(정적자원)을 저장하는 공간이다.
// 웹브라우저에서 접근 가능한 파일들을 저장하는 폴더이다.
// public 폴더에는 index.html 파일을 생성한다.

// 5. node.js 웹 서버 구동
// > nodemon server.js

// [웹서비스]

// 1. 웹브라우저에서 html 페이지가 열리는 구조
//  1) 웹브라우저에서 해당하는 파일을 요청한다.
//  2) 웹서버가 우리의 요청을 받아서 해당 파일을 웹브라우저에 렌더링 해준다.
 
// 2. 웹서버
//  1) 웹서버는 사용자가 웹브라우저에서 요청한 자원을 제공해주는 기능을 한다.

// 3. 웹서버 프로그램
//  1) 웹서버 프로그램은 웹서버의 기능을 제공해주는 프로그램이다.
//  2) node.js에서는 http 모듈을 사용하여 웹서버 프로그램을 작성할 수 있다.
//  3) express 모듈은 node.js의 http 모듈을 내부적으로 사용하여 웹서버 프로그램을 작성할 수 있다.

// 4. 웹서버에서 요청과 응답처리
//  1) 웹브라우저의 주소창에 URL을 입력하면 웹서버에 요청이 전송된다.
//  2) 웹서버는 요청을 받아서 적절한 처리를 한 후 응답을 웹브라우저에 전송한다.
//  3) 웹브라우저는 응답을 받아서 화면에 렌더링한다.

// 5. 요청 URL(Uniform Resource Locator)
//  1) 웹브라우저 주소창에 https://www.naver.com:8080/id=hong 을 입력하면 웹브라우저는 www.naver.com 서버에 요청을 보낸다.
//  2) 요청 URL은 프로토콜, 호스트, 포트, 경로("/"), 쿼리스트링으로 구성된다.
//  3) 프로토콜 : http, https, ftp, file 등의 프로토콜을 사용한다.
//  4) 호스트 : 서버의 도메인 이름이나 IP 주소를 나타낸다.
//  5) 포트 : 서버의 포트 번호를 나타낸다.
//  6) http: 프로토콜은 html 문서를 전송하기 위한 프로토콜이다.

// 6. 요청 URL의 구조
// 1) 프로토콜 : http:// : http 프로토콜을 사용한다.
// 2) 호스트 : localhost : 서버의 도메인 이름이나 IP 주소를 나타낸다.
// 3) 포트 : 3000 : 서버의 포트 번호를 나타낸다.
// 4) 경로 : / : 서버의 루트 경로를 나타낸다.
// 5) 쿼리스트링 : ?id=123 : 서버에 전달하는 데이터를 나타낸다.

// 7. TCP/IP 프로토콜
// 1) TCP/IP 프로토콜은 인터넷에서 데이터를 주고받기 위한 프로토콜이다.
// 2) TCP(Transmission Control Protocol) : 신뢰성 있는 데이터 전송을 보장한다.
// 3) IP(Internet Protocol) : 데이터를 주고받는 기능을 제공한다.
// 4) TCP/IP 프로토콜은 OSI 7계층 모델에서 4계층인 전송계층에서 동작한다.

// 8. HTTP 프로토콜
// 1) HTTP(HyperText Transfer Protocol) : 웹브라우저와 웹서버 간에 데이터를 주고받기 위한 프로토콜이다.
// 2) HTTP 프로토콜은 TCP/IP 프로토콜 위에서 동작한다.
// 3) HTTP 프로토콜은 OSI 7계층 모델에서 7계층인 응용계층에서 동작한다.
// 4) HTTP 프로토콜은 요청과 응답으로 구성되어 있다.
// 5) 여기서 요청은 주소창에 URL을 입력하는 것을 말하고
//    응답은 웹서버에서 요청을 처리한 후 결과 페이지를 웹브라우저에 전송하는 것을 말한다.

// 9. DNS(Domain Name System)
// 1) DNS(Domain Name System) : 도메인 이름을 IP 주소로 변환하는 시스템이다.
// 2) DNS 서버는 도메인 이름을 IP 주소로 변환하고 IP 주소를 도메인 이름으로 변환한다.
// 3) DNS 서버는 인터넷에 연결된 모든 컴퓨터에 존재한다.

// 10. 사용자 요청과 서버 응답시 DNS 서버의 역할
// 1) 사용자가 웹브라우저 주소창에 www.google.com을 입력하면
// 2) 웹브라우저는 DNS 서버에 www.google.com을 IP 주소로 변환해달라고 요청한다.
// 3) DNS 서버는 www.google.com을 IP 주소로 변환한 후 웹브라우저에 전송한다.
// 4) 웹브라우저는 IP 주소를 받아서 해당 서버에 요청을 보낸다.
// 5) 웹브라우저는 웹서버가 보내온 페이지를 화면에 렌더링한다.

// 11. HTTP 요청 메소드
// 1) GET : 데이터를 요청할 때 웹브라우저의 주소창에 URL에 데이터를 붙여서 전송한다.
// 2) POST : 데이터를 전송할 때 메시지 바디에 데이터를 붙여서 전송한다.
//    예를 들면 form 태그를 이용하여 데이터를 전송할 때 POST 방식을 사용한다.

// 12. 요청메시지
// 1) 모든 요청에는 요청 메시지가 포함되어 있다. 요청 메시지의 구성을 살펴보면
//    요청 라인, 요청 헤더, 요청 바디로 구성되어 있다.
// 2) 요청라인에는 요청 메소드, URL, 프로토콜 버전이 포함되어 있다.
// 3) 요청헤더에는 요청에 대한 정보가 포함되어 있다.
// 4) 요청바디에는 요청에 대한 데이터가 포함되어 있다.예를들면 form + post 방식으로
//    전송할 때 데이터가 요청바디에 포함된다.

